const User = require('../models/User');
const Notification = require('../models/Notification');
const { getIO } = require('../../socketManager');

/**
 * Busca todos os usu√°rios administradores e cria uma notifica√ß√£o para cada um deles.
 * @param {string} mensagem - A mensagem da notifica√ß√£o.
 */
exports.createNotificationForAdmins = async (mensagem) => {
    try {
        // 1. Encontrar todos os usu√°rios que s√£o administradores.
        // .select('_id') garante que estamos buscando apenas o ID, o que √© mais eficiente.
        const admins = await User.find({ role: 'admin' }).select('_id');

        // Se n√£o houver administradores, n√£o h√° nada a fazer.
        if (!admins || admins.length === 0) {
            console.log('Nenhum administrador encontrado para notificar.');
            return;
        }

        // 2. Preparar um array de objetos de notifica√ß√£o.
        const notifications = admins.map(admin => ({
            destinatario: admin._id,
            mensagem: mensagem,
        }));

        // 3. Inserir todas as notifica√ß√µes no banco de dados de uma s√≥ vez.
        // .insertMany() √© muito mais eficiente do que criar uma por uma dentro de um loop.
        await Notification.insertMany(notifications);
        console.log(`Notifica√ß√µes criadas para ${admins.length} administrador(es).`);

    } catch (error) {
        console.error('Erro ao criar notifica√ß√µes para administradores:', error);
        // Em um sistema de produ√ß√£o, voc√™ poderia logar este erro em um servi√ßo de monitoramento.
    }
};

/**
 * Busca todas as notifica√ß√µes de um usu√°rio espec√≠fico, ordenadas da mais recente para a mais antiga.
 * @param {string} userId - O ID do usu√°rio destinat√°rio.
 * @returns {Promise<Array>} Um array de notifica√ß√µes.
 */
exports.getNotificationsForUser = async (userId) => {
    return await Notification.find({ destinatario: userId }).sort({ createdAt: -1 });
};

/**
 * Marca uma notifica√ß√£o espec√≠fica como lida, garantindo que o usu√°rio seja o dono da notifica√ß√£o.
 * @param {string} notificationId - O ID da notifica√ß√£o a ser marcada.
 * @param {string} userId - O ID do usu√°rio que est√° fazendo a requisi√ß√£o.
 * @returns {Promise<Object>} A notifica√ß√£o atualizada.
 */
exports.markAsRead = async (notificationId, userId) => {
    // A condi√ß√£o { destinatario: userId } √© uma camada de seguran√ßa crucial.
    // Ela garante que um usu√°rio n√£o possa marcar a notifica√ß√£o de outro como lida.
    const notification = await Notification.findOneAndUpdate(
        { _id: notificationId, destinatario: userId },
        { lida: true },
        { new: true }
    );

    if (!notification) {
        throw new Error('Notifica√ß√£o n√£o encontrada ou voc√™ n√£o tem permiss√£o para modific√°-la.');
    }

    return notification;
};

/**
 * Verifica os aniversariantes do dia, cria notifica√ß√µes persistentes
 * e envia notifica√ß√µes em tempo real se estiverem online.
 */
exports.sendBirthdayNotifications = async () => {
    console.log('‚è∞ Executando verifica√ß√£o de anivers√°rios...');
    const today = new Date();
    const currentMonth = today.getMonth() + 1; // getMonth() √© 0-11
    const currentDay = today.getDate();

    try {
        // Usa a pipeline de agrega√ß√£o do MongoDB para encontrar os aniversariantes
        // de forma eficiente, sem precisar buscar todos os usu√°rios.
        const aniversariantes = await User.aggregate([
            {
                $match: {
                    $expr: {
                        $and: [
                            { $eq: [{ $month: '$dataNascimento' }, currentMonth] },
                            { $eq: [{ $dayOfMonth: '$dataNascimento' }, currentDay] }
                        ]
                    }
                }
            }
        ]);

        if (aniversariantes.length === 0) {
            console.log('Nenhum aniversariante hoje.');
            return;
        }

        console.log(`üéÇ Encontrado(s) ${aniversariantes.length} aniversariante(s) hoje!`);

        const io = getIO();

        for (const user of aniversariantes) {
            const message = `Feliz anivers√°rio, ${user.nome}! üéâ Use o cupom ANIVERSARIO10 para 10% de desconto hoje.`;

            // 1. Cria a notifica√ß√£o persistente no banco de dados
            await Notification.create({
                destinatario: user._id,
                mensagem: message
            });

            // 2. Envia a notifica√ß√£o em tempo real se o usu√°rio estiver online
            io.to(user._id.toString()).emit('new_notification', { message });

            // 3. (Opcional) Notifica os admins
            await exports.createNotificationForAdmins(`Hoje √© o anivers√°rio de ${user.nome}.`);
            io.to('admins').emit('info_notification', { message: `Lembrete: Hoje √© o anivers√°rio de ${user.nome}.` });
        }

    } catch (error) {
        console.error('Erro ao processar notifica√ß√µes de anivers√°rio:', error);
    }
};